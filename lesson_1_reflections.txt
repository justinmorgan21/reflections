How did viewing a diff between two versions of a file help you see the bug that was introduced?

I could easily compare line by line in the local area where the bug was contained.



How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

I won't ever have to rewrite code that I modified earlier if I want to go back.



What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The pro is that you will more often get changes that are made up of a logical alteration.  The con is that you may be irresponsible and wait too long, not creating enough revert points to fall back on.



Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Often, version control is desired for a project that has many files that are dependent on each other, and may all have individual changes to produce one desired modification to the project.  Google Docs and such are mostly used for stand alone files that don't have dependencies.



How can you use the commands git log and git diff to view the history of files?

git log prints a record of the commits for a branch, including a unique commit number, the author, date, and commit message.  git log --stat prints the same record with indications for the proportional difference of additions and subtractions made for each commit.  git diff allows you to see the actual line by line differences between two files as additions and subtractions.



How might using version control make you more confident to make changes that could break something?

I know that there is always a backup that is easy to get back to if I make a mistake.



Now that you have your workspace set up, what do you want to try using Git for?

To work on projects and keep version control all the way through the workflow.